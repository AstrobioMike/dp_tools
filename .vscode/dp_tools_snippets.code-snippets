{
	// Place your dp_tools workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	    "newCheckDataset": {
			"prefix": "ncd",
			"body": [
				"class $1(Check):",
				"    id = \"$1\"",
				"    config = {$2}",
				"    description = (",
				"    \"$3\"",
				"    )",
				"    flag_desc = {$4}",
				"    def validate_func(self, dataset: TemplateDataset) -> Flag:",
		        "        print(\"Ready to implement\")",
				"        return Flag(code = code, check = self, message_args = {})"
			]
		},
	    "newCheckSample": {
			"prefix": "ncs",
			"body": [
				"class $1(Check):",
				"    id = \"$1\"",
				"    config = {$2}",
				"    description = (",
				"    \"$3\"",
				"    )",
				"    flag_desc = {$4}",
				"    def validate_func(self, sample: TemplateSample) -> Flag:",
		        "        print(\"Ready to implement\")",
				"        return Flag(code = code, check = self, message_args = {})"
			]
		},
	    "newCheckComponent": {
			"prefix": "ncc",
			"body": [
				"class $1(Check):",
				"    id = \"$1\"",
				"    config = {$2}",
				"    description = (",
				"    \"$3\"",
				"    )",
				"    flag_desc = {$4}",
				"    def validate_func(self, component: TemplateComponent) -> Flag:",
		        "        print(\"Ready to implement\")",
				"        return Flag(code = code, check = self, message_args = {})"
			],
		}
}